# pragma once

#include<unordered_map>
#include "lexical_analysis/token.hpp"

inline std::unordered_map<std::string, token_type> nameType = {
    {"integer",   token_type::_integer},
    {"id",        token_type::_id},
    {"if",        token_type::_if},
    {"then",      token_type::_then},
    {"else",      token_type::_else},
    {"relop",     token_type::_relop},
    {"int",       token_type::_int},
    {"float",     token_type::_float},
    {"bool",      token_type::_bool},
    {"string",    token_type::_string},
    {"char",      token_type::_char},
    {"double",    token_type::_double},
    {"vector",    token_type::_vector},
    {"set",       token_type::_set},
    {"map",       token_type::_map},
    {"while",     token_type::_while},
    {"std",       token_type::_std},
    {"cout",      token_type::_cout},
    {"cin",       token_type::_cin},
    {"aop",       token_type::_aop},
    {"bop",       token_type::_bop},
    {"lop",       token_type::_lop},
    {"assignop",  token_type::_assignop},
    {"end",       token_type::_end},
    {"return",    token_type::_return},
    {"fas",       token_type::_fas},
    {"fae",       token_type::_fae},
    {"cbs",       token_type::_cbs},
    {"cbe",       token_type::_cbe},
    {"scrop",     token_type::_scrop},
    {"comma",     token_type::_comma},
    {"uset",      token_type::_uset},
    {"umap",      token_type::_umap},
    {"int_lit",   token_type::_int_lit},
    {"doub_lit",  token_type::_doub_lit},
    {"char_lit",  token_type::_char_lit},
    {"str_lit",   token_type::_str_lit},
    {"main",      token_type::_main},
    {"long",      token_type::_long},
    {"$",         token_type::_dollar},
    {"larrow",    token_type::_larrow},
    {"rarrow",    token_type::_rarrow},
    {"dlarrow",   token_type::_dlarrow},
    {"drarrow",   token_type::_drarrow},
    {"endl",      token_type::_endl}
};

inline std::unordered_map<token_type, std::string> tokenName = {
    {token_type::_integer,   "integer"},
    {token_type::_id,        "id"},
    {token_type::_if,        "if"},
    {token_type::_then,      "then"},
    {token_type::_else,      "else"},
    {token_type::_relop,     "relop"},
    {token_type::_int,       "int"},
    {token_type::_float,     "float"},
    {token_type::_bool,      "bool"},
    {token_type::_string,    "string"},
    {token_type::_char,      "char"},
    {token_type::_double,    "double"},
    {token_type::_vector,    "vector"},
    {token_type::_set,       "set"},
    {token_type::_map,       "map"},
    {token_type::_while,     "while"},
    {token_type::_std,       "std"},
    {token_type::_cout,      "cout"},
    {token_type::_cin,       "cin"},
    {token_type::_aop,       "aop"},
    {token_type::_bop,       "bop"},
    {token_type::_lop,       "lop"},
    {token_type::_assignop,  "assignop"},
    {token_type::_end,       "end"},
    {token_type::_return,    "return"},
    {token_type::_fas,       "fas"},
    {token_type::_fae,       "fae"},
    {token_type::_cbs,       "cbs"},
    {token_type::_cbe,       "cbe"},
    {token_type::_scrop,     "scrop"},
    {token_type::_comma,     "comma"},
    {token_type::_uset,      "uset"},
    {token_type::_umap,      "umap"},
    {token_type::_int_lit,   "int_lit"},
    {token_type::_doub_lit,  "doub_lit"},
    {token_type::_char_lit,  "char_lit"},
    {token_type::_str_lit,   "str_lit"},
    {token_type::_main,      "main"},
    {token_type::_long,      "long"},
    {token_type::_dollar,    "$"},
    {token_type::_larrow,    "larrow"},
    {token_type::_rarrow,    "rarrow"},
    {token_type::_dlarrow,   "dlarrow"},
    {token_type::_drarrow,   "drarrow"},
    {token_type::_endl,      "endl"}
};